import socket
import ipaddress
from concurrent.futures import ThreadPoolExecutor

# Well-known ports to check for vulnerabilities
COMMON_PORTS = {
    21: "FTP",
    22: "SSH",
    23: "Telnet",
    25: "SMTP",
    53: "DNS",
    80: "HTTP",
    110: "POP3",
    139: "NetBIOS",
    443: "HTTPS",
    445: "SMB",
    1433: "MSSQL",
    3306: "MySQL",
    3389: "RDP",
    5800: "VNC",
    5900: "VNC"
}

def scan_port(ip, port, timeout=1):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            s.connect((ip, port))
            return True
    except socket.error:
        return False

def banner_grab(ip, port, timeout=1):
    try:
        socket.setdefaulttimeout(timeout)
        with socket.socket() as s:
            s.connect((ip, port))
            banner = s.recv(1024).decode().strip()
            return banner
    except:
        return "No banner grabbed"

def scan_ip(ip):
    open_ports = {}
    for port, service in COMMON_PORTS.items():
        if scan_port(ip, port):
            banner = banner_grab(ip, port)
            open_ports[port] = {"service": service, "banner": banner}
    return ip, open_ports

def scan_network(network_cidr):
    network = ipaddress.ip_network(network_cidr)
    with ThreadPoolExecutor(max_workers=10) as executor:
        results = executor.map(scan_ip, [str(ip) for ip in network])

    for ip, open_ports in results:
        if open_ports:
            print(f"\n[+] {ip} has the following open ports:")
            for port, info in open_ports.items():
                print(f"    Port {port} ({info['service']}): {info['banner']}")
        else:
            pass

# Example Usage
network_cidr = input("Enter the network range in CIDR notation (e.g., '192.168.1.0/24'): ")
scan_network(network_cidr)